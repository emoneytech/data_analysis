#card-evaluated-movements.card.card-outline.card-warning
  .card-header
    .card-title
      = fa_icon EvaluatedMovement.icon
      = link_to EvaluatedMovement.model_name.human(count: 2), data_analysis_evaluated_movements_path(params: opts)
      - from,to = opts[:filter][:daterange].split(" - ")
      %span#opts
        \- #{opts[:filter][:in_out]} From #{from} to #{to} 
    .card-tools
      .btn-group.btn-group-sm.btn-group-toggle.m-0{"data-toggle" => "buttons"}
        %label.btn.btn-outline-warning
          %input#all{:autocomplete => "off", :checked => "checked", :name => "directions", value: "ALL", :type => "radio"}/
          ALL
        %label.btn.btn-outline-success
          %input#in{:autocomplete => "off", :name => "directions", :type => "radio", value: "IN"}/
          IN
        %label.btn.btn-outline-danger
          %input#out{:autocomplete => "off", :name => "directions", :type => "radio", value: "OUT"}/
          OUT
  .card-body
    = line_chart evaluated_movements_data_analysis_charts_path(params: opts), remote: true, download: true, id: "latest-evaluated-movements"

:javascript
  $('input[type=radio][name=directions]').change(function() {
    setGraphicsClass('#card-evaluated-movements', this.value)
    const url = "/data_analysis/charts/evaluated_movements?filter[in_out]=" + this.value +
      "&group_by_day=#{opts[:group_by_day]}" +
      "&filter[daterange]=#{opts[:filter][:daterange]}"
    refreshChart('latest-evaluated-movements', url)
  })
