.card.card-primary.card-outline{classes: "#{ 'collapsed-card' unless params[:filter]}" }
  .card-header
    %h3.card-title
      %i.fa.fa-chart-bar
      = t(:filters, default: 'Filters')
    .card-tools
      %button{type: "button", class: "btn btn-tool", "data-card-widget" => "collapse"}
        %i.fas{class: " #{ params[:filter] ? 'fa-minus' : 'fa-plus'}" }
  .card-body
    = simple_form_for :filter, url: [:data_analysis, :evaluated_movements], method: :get, remote: false do |f|
      .row
        .col-md-3
          = f.input :in_out, as: :select, collection: %w[IN OUT], required: false, input_html: {class: "select2"}, selected: "#{params[:filter][:in_out] if params[:filter]}", include_blank: true
        .col-md-3
          = f.input :internal, as: :select, collection: [true, false], required: false, input_html: {class: "select2"}, selected: "#{params[:filter][:internal] if params[:filter]}", include_blank: true
      .row
        .col-md-3= f.input :daterange, label: 'Date range', input_html: { class: 'local-daterange', checked: params[:filter] && params[:filter][:daterange] }, required: true
        .col-md-3= f.input :service_id, label: 'Service ID', required: false, input_html: {value: "#{params[:filter][:service_id] if params[:filter]}"}
        .col-md-3= f.input :product_id, label: 'Product ID', required: false, input_html: {value: "#{params[:filter][:product_id] if params[:filter]}"}
        .col-md-3= f.input :product_name, required: false, input_html: {value: "#{params[:filter][:product_name] if params[:filter]}"}
      .row
        .col-md-3= f.input :customer_full_name, required: false, input_html: {value: "#{params[:filter][:customer_full_name] if params[:filter]}"}
        .col-md-3= f.input :customer_id, label: "Customer ID", required: false, input_html: {value: "#{params[:filter][:customer_id] if params[:filter]}"}
        .col-md-3= f.input :origin_country, as: :string, required: false, input_html: {value: "#{params[:filter][:origin_country] if params[:filter]}"}
        .col-md-3= f.input :destination_country, as: :string, required: false, input_html: {value: "#{params[:filter][:destination_country] if params[:filter]}"}
      .row
        .col-md-3= f.input :beneficiary, required: false, input_html: {value: "#{params[:filter][:beneficiary] if params[:filter]}"}
        .col-md-3= f.input :beneficiary_iban, required: false, input_html: {value: "#{params[:filter][:beneficiary_iban] if params[:filter]}"}
        .col-md-3= f.input :beneficiary_card, required: false, input_html: {value: "#{params[:filter][:beneficiary_card] if params[:filter]}"}
        .col-md-3= f.input :beneficiary_other, required: false, input_html: {value: "#{params[:filter][:beneficiary_other] if params[:filter]}"}
      .row
        .col-md-3= f.input :payer, required: false, input_html: {value: "#{params[:filter][:payer] if params[:filter]}"}
        .col-md-3= f.input :payer_iban, required: false, input_html: {value: "#{params[:filter][:payer_iban] if params[:filter]}"}
        .col-md-3= f.input :payer_card, required: false, input_html: {value: "#{params[:filter][:payer_card] if params[:filter]}"}
        .col-md-3= f.input :payer_other, required: false, input_html: {value: "#{params[:filter][:payer_other] if params[:filter]}"}
      .row
        .col-md-3= f.input :min_recursion_all_7, required: false, input_html: {value: "#{params[:filter][:min_recursion_all_7] if params[:filter]}"}
        .col-md-3= f.input :min_recursion_all_30, required: false, input_html: {value: "#{params[:filter][:min_recursion_all_30] if params[:filter]}"}
        .col-md-3= f.input :min_recursion_customer_7, required: false, input_html: {value: "#{params[:filter][:min_recursion_customer_7] if params[:filter]}"}
        .col-md-3= f.input :min_recursion_customer_30, required: false, input_html: {value: "#{params[:filter][:min_recursion_customer_30] if params[:filter]}"}

      = f.submit "Submit", disable_with: 'Submiting...', class: 'btn btn-success'

:javascript
  document.addEventListener("turbolinks:load", () => {
    $(".local-daterange").daterangepicker({
      startDate: moment("#{@daterange.split(' - ')[0]}",'DD/MM/YYYY'),
      endDate: moment("#{@daterange.split(' - ')[1]}",'DD/MM/YYYY'),
      maxDate: moment(),
      locale: { format: 'DD/MM/YYYY'},
    })
  })
