.card.card-info.card-outline.mb-0
  .card-header
    .card-title
      %i.fa.fa-chart-bar
      = EvaluatedMovement.human_attribute_name(:evaluated_factor)
  .card-body.p-2
    %table.table.table-striped.table-hover.table-bordered.mb-2
      %tbody
        %tr
          %th= link_to EvaluatedMovement.human_attribute_name(:amount_factor), [:amount_factor, :algorithms]
          %td.text-center
            %span.amount_factor> 0.00
        %tr
          %th= link_to EvaluatedMovement.human_attribute_name(:country_factor), [:country_factor, :algorithms]
          %td.text-center
            %span.country_factor> 0.00
        %tr
          %th= link_to EvaluatedMovement.human_attribute_name(:product_factor), [:product_factor, :algorithms]
          %td.text-center
            %span.product_factor> 0.00
        %tr
          %th= link_to EvaluatedMovement.human_attribute_name(:recursion_factor), [:recursion_factor, :algorithms]
          %td.text-center
            %span.recursion_factor> 0.00
        %tr
          %th= EvaluatedMovement.human_attribute_name(:evaluated_factor)
          %td.text-center
            %strong
              %span.evaluated_factor.text-danger> 0.00

    = simple_form_for :evaluated_factor, method: :get, html: {id: 'evaluated_factor_form'}, remote: false do |f|
      .input-group
        %textarea#evaluated_factor_eq.form-control{rows: 3}
          :preserve
          = Configurable.evaluated_eq
        %span.input-group-append
          %input.btn.btn-success.btn-flat{type: "submit", value: 'Plot'}>
    #plot_evaluated_factor

:javascript
  var evaluated_eq     = $('#evaluated_factor_eq').val().replace("**", "^")

  function calculateAttentionFactor() {
    let opts = {
      product_factor: calculateProductFactor(),
      recursion_factor: calculateRecursionFactor(),
      amount_factor: calculateAmountFactor(),
      countries_factor: calculateCountryFactor()
    }
    const evaluated_factor = calculateExpression(evaluated_eq, opts)
    $('span.evaluated_factor').html(formatFactor(evaluated_factor))
    return evaluated_factor
  }

  $(document).on('turbolinks:load', function() {
    plot_evaluated()
    // calculateAttentionFactor()
    $('form#amount_factor_form').on('keyup change paste', 'input, select, textarea', function(){
      calculateAttentionFactor()
    })
    $('form#recursion_factor_form').on('keyup change paste', 'input, select, textarea', function(){
      calculateAttentionFactor()
    })
    $('form#product_factor_form').on('keyup change paste', 'input, select, textarea', function(){
      calculateAttentionFactor()
    })
    $('form#country_factor_form').on('keyup change paste', 'input, select, textarea', function(){
      calculateAttentionFactor()
    })
    document.getElementById('evaluated_factor_form').onsubmit = function (event) {
      event.preventDefault()
      plot_evaluated()
    }
  })

  function plot_evaluated() {
    let eq = $('#evaluated_factor_eq').val()
      .replace("product_factor", `${calculateProductFactor()}`)
      .replace("recursion_factor", `${calculateRecursionFactor()}`)
      .replace("countries_factor", `${calculateCountryFactor()}`)
      .replace("amount_factor", 'x')
    draw(eq, 'plot_evaluated_factor', [0, 100000, 100])
    calculateAttentionFactor()
  }
  window.addEventListener('resize', function(event) {
    setTimeout(plot_evaluated(), 500)
  }, true)
  

