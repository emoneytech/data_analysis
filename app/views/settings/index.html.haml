.row
  .col-md-12 
    = render '/settings/form'
.row
  .col-md-6= render '/settings/amount_factor_calculated'
  .col-md-6= render '/settings/product_factor_calculated'
.row
  .col-md-6= render '/settings/countries_factor_calculated'
  .col-md-6= render '/settings/attention_factor_calculated'

:javascript
  function draw(expression, canvas_id, range) {
    try {
      const expr = math.compile(expression)

      // evaluate the expression repeatedly for different values of x
      const xValues = math.range(range[0], range[1], range[2]).toArray()
      const yValues = xValues.map(function (x) {
        return expr.evaluate({x: x})
      })

      // render the plot using plotly
      const trace1 = {
        x: xValues,
        y: yValues,
        type: 'scatter'
      }
      const data = [trace1]
      Plotly.newPlot(canvas_id, data)
    }
    catch (err) {
      console.error(err)
      alert(err)
    }
  }

  function percentage_of(val, n) {
    const res = parseFloat(val) / parseFloat(n) * 100
    return res 
  }
  function percent_of(val, n) {
    const res = parseFloat(val) / 100 * parseFloat(n)
    return res 
  }

  function calculateBaseAmount() {
    const factor_for_amount = parseFloat($('#filter_factor_for_amount').val()) 
    const amount_cents = parseInt($('#filter_amount').val() * 100) 
    const divisor_amount_for_factor = parseFloat($('#filter_divisor_amount_for_factor').val())
    const amount_factor_calculated = parseFloat(factor_for_amount * (amount_cents / 100 / divisor_amount_for_factor))
    return amount_factor_calculated
  }

  function calculateProductFactor() {
    const product_base_risk = parseFloat($('#filter_product_base_risk').val())
    const product_factor = parseFloat((percentage_of(product_base_risk, 1)) - 100) 
    return product_factor
  }
  function parseCountry(string) {
    if(!string.length) {
      return 1
    }
    const results = string.split('|')
    return results[0].trim()
  }
  function calculateAttentionFactor() {
    const amount_factor_calculated = calculateBaseAmount()
    const product_factor_calculated = calculateProductFactor()

    const source_country_factor = parseFloat(parseCountry($('#filter_source_country option:selected').text()))
    const destination_country_factor = parseFloat(parseCountry($('#filter_destination_country option:selected').text()))

    const eval_source_country = parseFloat(((source_country_factor * source_country_factor * source_country_factor) / 20) + 1)
    const eval_destination_country = parseFloat(((destination_country_factor * source_country_factor * source_country_factor) / 20) + 1)
 
    const countries_factor = parseFloat(eval_source_country * eval_destination_country)
    console.log('countries_factor', countries_factor)

    const recursion_7 = parseFloat($('#filter_recursion_7').val())
    const recursion_30 = parseFloat($('#filter_recursion_30').val())

    const attention_factor_calculated_7 = parseFloat((((product_factor_calculated * recursion_7 * amount_factor_calculated) + 100) / 100) * countries_factor)
    const attention_factor_calculated_30 = parseFloat((((product_factor_calculated * recursion_30 * amount_factor_calculated) + 100) / 100) * countries_factor)
    $('#amount_factor_calculated').html(amount_factor_calculated.toFixed(6))
    $('#product_factor_calculated').html(product_factor_calculated.toFixed(6))
    $('#attention_factor_calculated_7').html(attention_factor_calculated_7.toFixed(3))
    $('#attention_factor_calculated_30').html(attention_factor_calculated_30.toFixed(3))
    const amount_expression = getAmountExpression()
    $('#amount_factor_calculated_eq').val(amount_expression)
    draw(amount_expression, 'plot_amount_factor', [0, 100000, 100])
    const product_expression = getProductExpression()
    $('#product_factor_calculated_eq').val(product_expression)
    draw(product_expression, 'plot_product_factor', [1.01, 2, 0.1])
  }

  function getAmountExpression() {
    const expression = `${parseFloat($('#filter_factor_for_amount').val())} * (x / ${parseFloat($('#filter_divisor_amount_for_factor').val())})`
    return expression
  }

  function getProductExpression() {
    const expression = `(x / 1 * 100) - 100`
    return expression
  }

  $(document).ready(function() {
    calculateAttentionFactor()
    $('form#filter_form').on('keyup change paste', 'input, select, textarea', function(){
      calculateAttentionFactor()
    })

  })

