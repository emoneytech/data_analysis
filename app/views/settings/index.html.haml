.row
  .col-md-8
    = render '/settings/form'
  .col-md-4 
    = render '/settings/evaluations'
.row
  .col-md-4= render '/settings/amount_factor_calculated'
  .col-md-4= render '/settings/product_factor_calculated'
  .col-md-4= render '/settings/countries_factor_calculated'

:javascript
  function draw(expression, canvas_id, range) {
    try {
      const expr = math.compile(expression)

      // evaluate the expression repeatedly for different values of x
      const xValues = math.range(range[0], range[1], range[2]).toArray()
      const yValues = xValues.map(function (x) {
        return expr.evaluate({x: x})
      })

      // render the plot using plotly
      const trace1 = {
        x: xValues,
        y: yValues,
        type: 'scatter'
      }
      const data = [trace1]
      Plotly.newPlot(canvas_id, data)
    }
    catch (err) {
      console.error(err)
      alert(err)
    }
  }

  function parseCountry(string) {
    if(!string.length) {
      return 1
    }
    const results = string.split('|')
    return results[0].trim()
  }

  function percentage_of(val, n) {
    const res = parseFloat(val) / parseFloat(n) * 100
    return res 
  }
  function percent_of(val, n) {
    const res = parseFloat(val) / 100 * parseFloat(n)
    return res 
  }

  function calculateAmountFactor() {
    const factor_for_amount = parseFloat($('#filter_factor_for_amount').val()) 
    const divisor_amount_for_factor = parseFloat($('#filter_divisor_amount_for_factor').val())
    const amount = parseFloat($('#filter_amount').val()) 
    const amount_factor_calculated = parseFloat(((amount / divisor_amount_for_factor) ** 3) * factor_for_amount)
    $('.amount_factor_calculated').html(amount_factor_calculated.toFixed(6))
    return amount_factor_calculated
  }

  function calculateProductFactor() {
    const product_base_risk = parseFloat($('#filter_product_base_risk').val())
    const product_factor = parseFloat((percentage_of(product_base_risk, 1)) - 100) 
    $('.product_factor_calculated').html(product_factor.toFixed(6))
    return product_factor
  }

  function calculateCountryFactor(source) {
    const factor = parseFloat(parseCountry($(`#filter_${source}_country option:selected`).text()))
    const country_factor = parseFloat(5 * (factor - 1) ** 2)
    return country_factor
  }

  function calculateCountriesFactor() {
    const source_country_factor = calculateCountryFactor('source')
    const destination_country_factor = calculateCountryFactor('destination')
    const countries_factor = source_country_factor > destination_country_factor ? source_country_factor : destination_country_factor
    $('.countries_factor_calculated').html(countries_factor.toFixed(6))
    return countries_factor
  }

  function calculateRecurionFactor(nr) {
    const factor = parseInt($(`#filter_recursion_${nr}`).val())
    const recursion_factor = factor > 0 ? factor : 1
    return recursion_factor
  }

  function calculateAttentionFactor() {
    const amount_factor_calculated = calculateAmountFactor()
    const product_factor_calculated = calculateProductFactor()
    const countries_factor_calculated = calculateCountriesFactor()
    const recursion_7 = calculateRecurionFactor('7')
    const recursion_30 = calculateRecurionFactor('30')


    // const attention_factor_calculated_7 = parseFloat((((product_factor_calculated * recursion_7 * amount_factor_calculated * countries_factor_calculated) + 100) / 100))
    // const attention_factor_calculated_30 = parseFloat((((product_factor_calculated * recursion_30 * amount_factor_calculated * countries_factor_calculated) + 100) / 100))
    
    const attention_factor_calculated_7 = parseFloat(product_factor_calculated * (recursion_7 ** 2) * amount_factor_calculated * countries_factor_calculated)
    const attention_factor_calculated_30 = parseFloat(product_factor_calculated * (recursion_30 ** 2) * amount_factor_calculated * countries_factor_calculated)

    $('.attention_factor_calculated_7').html(attention_factor_calculated_7.toFixed(3))
    $('.attention_factor_calculated_30').html(attention_factor_calculated_30.toFixed(3))

  }

  function initDraw() {
    const amount_expression = `((x / ${parseFloat($('#filter_divisor_amount_for_factor').val())}) ^ 3)` +
                              ` * ${parseFloat($('#filter_factor_for_amount').val())}`
    const countries_expression = '5(x - 1)^2'
    const product_expression = `(x / 1 * 100) - 100`
    $('#amount_factor_calculated_eq').val(amount_expression)
    $('#product_factor_calculated_eq').val(product_expression)
    $('#countries_factor_calculated_eq').val(countries_expression)
    draw(amount_expression, 'plot_amount_factor', [0, 100000, 100])
    draw(product_expression, 'plot_product_factor', [1.01, 2, 0.1])
    draw(countries_expression, 'plot_countries_factor', [1.01, 4, 0.1])
  }

  $(document).ready(function() {
    initDraw()
    calculateAttentionFactor()

    $('form#filter_form').on('keyup change paste', 'input, select, textarea', function(){
      calculateAttentionFactor()
    })

  })

