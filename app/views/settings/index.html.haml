.row
  .col-md-8
    = render '/settings/form'
  .col-md-4 
    = render '/settings/evaluations'
.row
  .col-md-6= render '/settings/amount_factor_calculated'
  .col-md-6= render '/settings/recursion_factor_calculated'
.row
  .col-md-6= render '/settings/country_factor_calculated'
  .col-md-6= render '/settings/product_factor_calculated'

:javascript
  var amount_eq     = "#{Configurable.amount_eq}".replace("**", "^")
  var recursion_eq  = "#{Configurable.recursion_eq}".replace("**", "^")
  var country_eq     = "#{Configurable.country_eq}".replace("**", "^")
  var product_eq     = "#{Configurable.product_eq}".replace("**", "^")
  var attention_eq     = "#{Configurable.attention_eq}".replace("**", "^")

  function draw(expression, canvas_id, range) {
    try {
      const expr = math.compile(expression.replace("**", "^"))

      // evaluate the expression repeatedly for different values of x
      const xValues = math.range(range[0], range[1], range[2]).toArray()
      const yValues = xValues.map(function (x) {
        return expr.evaluate({x: x})
      })

      // render the plot using plotly
      const trace1 = {
        x: xValues,
        y: yValues,
        type: 'scatter'
      }
      const data = [trace1]
      Plotly.newPlot(canvas_id, data)
    }
    catch (err) {
      console.error(err)
      alert(err)
    }
  }

  function parseCountry(string) {
    if(!string.length) {
      return 1
    }
    const results = string.split('|')
    return results[0].trim()
  }

  function percentage_of(val, n) {
    const res = parseFloat(val) / parseFloat(n) * 100
    return res 
  }

  function calculateExpression(eq, opts) {
    try {
      const expr = math.compile(eq)
      return expr.evaluate(opts)
    }
    catch (err) {
      console.error(err)
      alert(err)
    }
  }

  function calculateAmountFactor() {
    let opts = {
      x: parseFloat($('#filter_amount').val()),
    }
    const amount_factor_calculated = calculateExpression(amount_eq, opts)
    $('.amount_factor_calculated').html(amount_factor_calculated.toFixed(6))
    return amount_factor_calculated
  }

  function calculateRecursionFactor() {
    const min_factor = parseInt($(`#filter_recursion`).val()) > 0 ? parseInt($(`#filter_recursion`).val()) : 1
    let opts = {
      x: min_factor
    }
    const recursion_factor = calculateExpression(recursion_eq, opts)
    $('.recursion_factor_calculated').html(recursion_factor.toFixed(6))
    return recursion_factor
  }

  function calculateProductFactor() {
    let opts = {
      x: parseFloat($('#filter_product_base_risk').val()),
    }
    const product_factor_calculated = calculateExpression(product_eq, opts)
    $('.product_factor_calculated').html(product_factor_calculated.toFixed(6))
    return product_factor_calculated
  }

  function calculateCountryFactor(source) {
    let opts = {
      x: parseFloat(parseCountry($(`#filter_${source}_country option:selected`).text()))
    }
    const country_factor = calculateExpression(country_eq, opts)
    return country_factor
  }

  function calculateCountriesFactor() {
    const source_country_factor = calculateCountryFactor('source')
    const destination_country_factor = calculateCountryFactor('destination')
    const countries_factor = source_country_factor > destination_country_factor ? source_country_factor : destination_country_factor
    $('.countries_factor_calculated').html(countries_factor.toFixed(6))
    return countries_factor
  }

  function calculateAttentionFactor(recursion) {
    let opts = {
      product_factor_calculated: calculateProductFactor(),
      recursion_factor_calculated: calculateRecursionFactor(),
      amount_factor_calculated: calculateAmountFactor(),
      countries_factor_calculated: calculateCountriesFactor()
    }
    const attention_factor_calculated = calculateExpression(attention_eq, opts)
    $('.attention_factor_calculated').html(attention_factor_calculated.toFixed(6))
    return attention_factor_calculated
  }



  $(document).ready(function() {
    calculateAttentionFactor()
    $('form#filter_form').on('keyup change paste', 'input, select, textarea', function(){
      calculateAttentionFactor()
    })
  })

